package com.sist.main;
/*
 * 	상속
 * 		=> 기존의 클래스를 재사용(메소드 변경,메소드 추가)
 * 		=> extends
 * 		=> 단일 상속
 * 		=> 제약조건이 많다
 * 		=> 소스를 볼 수없다 => 분석(가독성)
 * 		=> 상위 클래스 => 하위 클래스 메모리 할당 => 실행속도가 늦다 
 * 		=> 상속 => 보완 **** 인터페이스 (구현)
 * 
 * 		1) 장점
 * 		=> 중복을 제거
 * 		=> 코드가 간결하다
 * 		=> 메소드 기능을 필요시마다 변경
 * 		=> 상위 클래스
 * 			: 공통적인 기능
 * 		=> 하위 클래스
 * 		 =>상속을 받으면 데이터형이 두개가 생긴다 
 * 
 * 		오버라이딩: 상속 받은 메소드를 재정의한다.
 * 		1) 상속이 존재
 * 		2) 메소드가 동일
 * 		3) 리턴형이 동일
 * 		4) 매개변수가 동일
 * 		5) 접근지정어 확장이 가능 / 축소하면 오류 발생 
 * 			=> 메소드는 다른 클래스와 연결
 * 				-------------------------- 가급적이면 public 으로 사용 
 * 		***** 클래스 / 생성자 / 메소드 => public 
 * 	    ***** 멤버변수 => private (데이터 보호)
 * 			=> 필요시에 사용이 가능 => getter / setter (캡슐화)
 * 	
 * */
public class 상속_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
